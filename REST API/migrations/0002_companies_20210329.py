# Generated by Django 3.1.7 on 2021-03-29 18:31

from django.db import migrations, connection


def sprav_tabulku_companies(arg1, arg2):

    query = """CREATE TABLE ov.companies (
    cin                 bigint   not null primary key,
    name                varchar,
    br_section          varchar,
    address_line        varchar,
    last_update         timestamp without time zone,
    created_at          timestamp without time zone,
    updated_at          timestamp without time zone);
    
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    SELECT cin, name, br_section, address_line, last_update, created_at, updated_at
    FROM
        (SELECT cin, corporate_body_name as name, br_section, 
            CASE
                 WHEN address_line IS NOT NULL
                     THEN address_line
                  WHEN street IS NOT NULL AND postal_code IS NOT NULL AND city IS NOT NULL
                    THEN CONCAT(street, ', ', postal_code, ' ', city) --este else ???
             END address_line, 
             updated_at as last_update, current_timestamp as created_at, current_timestamp as updated_at, 
          rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS pos
          FROM ov.or_podanie_issues)
          AS subselect
    WHERE pos = 1 AND cin IS NOT NULL
    ON CONFLICT (cin) DO NOTHING;
    
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    SELECT cin, name, br_section, address_line, last_update, created_at, updated_at
    FROM
        (SELECT cin, corporate_body_name as name, br_section, CONCAT(street, ', ', postal_code, ' ', city) as address_line, 
             updated_at as last_update, current_timestamp as created_at, current_timestamp as updated_at, 
          rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS pos
          FROM ov.likvidator_issues)
          AS subselect
    WHERE pos = 1 AND cin IS NOT NULL
    ON CONFLICT (cin) DO NOTHING;
    
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    SELECT cin, name, br_section, address_line, last_update, created_at, updated_at
    FROM
        (SELECT cin, corporate_body_name as name, '' as br_section, CONCAT(street, ', ', postal_code, ' ', city) as address_line, 
             updated_at as last_update, current_timestamp as created_at, current_timestamp as updated_at, 
          rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS pos
          FROM ov.konkurz_vyrovnanie_issues)
          AS subselect
    WHERE pos = 1 AND cin IS NOT NULL
    ON CONFLICT (cin) DO NOTHING;
    
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    SELECT cin, name, br_section, address_line, last_update, created_at, updated_at
    FROM
        (SELECT cin, corporate_body_name as name, br_section, CONCAT(street, ', ', postal_code, ' ', city) as address_line, 
             updated_at as last_update, current_timestamp as created_at, current_timestamp as updated_at, 
          rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS pos
          FROM ov.znizenie_imania_issues)
          AS subselect
    WHERE pos = 1 AND cin IS NOT NULL
    ON CONFLICT (cin) DO NOTHING;
    
    INSERT INTO ov.companies(cin, name, br_section, address_line, last_update, created_at, updated_at)
    SELECT cin, name, br_section, address_line, last_update, created_at, updated_at
    FROM
        (SELECT cin, corporate_body_name as name, '' as br_section, CONCAT(street, ', ', postal_code, ' ', city) as address_line, 
             updated_at as last_update, current_timestamp as created_at, current_timestamp as updated_at, 
          rank() OVER (PARTITION BY cin ORDER BY updated_at DESC) AS pos
          FROM ov.konkurz_restrukturalizacia_actors)
          AS subselect
    WHERE pos = 1 AND cin IS NOT NULL
    ON CONFLICT (cin) DO NOTHING;
    
    
    
    ALTER TABLE ov.or_podanie_issues ADD COLUMN company_id BIGINT REFERENCES ov.companies(cin);
    ALTER TABLE ov.likvidator_issues ADD COLUMN company_id BIGINT REFERENCES ov.companies(cin);
    ALTER TABLE ov.konkurz_vyrovnanie_issues ADD COLUMN company_id BIGINT REFERENCES ov.companies(cin);
    ALTER TABLE ov.znizenie_imania_issues ADD COLUMN company_id BIGINT REFERENCES ov.companies(cin);
    ALTER TABLE ov.konkurz_restrukturalizacia_actors ADD COLUMN company_id BIGINT REFERENCES ov.companies(cin);
    
    UPDATE ov.or_podanie_issues SET company_id = cin;
    UPDATE ov.likvidator_issues SET company_id = cin;
    UPDATE ov.konkurz_vyrovnanie_issues SET company_id = cin;
    UPDATE ov.znizenie_imania_issues SET company_id = cin;
    UPDATE ov.konkurz_restrukturalizacia_actors SET company_id = cin;
    
    CREATE INDEX company_id_index_podanie ON ov.or_podanie_issues(company_id);
    CREATE INDEX company_id_index_likvidator ON ov.likvidator_issues(company_id);
    CREATE INDEX company_id_index_konkurz_vyrovnanie ON ov.konkurz_vyrovnanie_issues(company_id);
    CREATE INDEX company_id_index_znizenie ON ov.znizenie_imania_issues(company_id);
    CREATE INDEX company_id_index_konkurz_restauracia ON ov.konkurz_restrukturalizacia_actors(company_id); 
    """

    with connection.cursor() as cursor:
        cursor.execute(query)



class Migration(migrations.Migration):

    dependencies = [
        ('aplikacia', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(sprav_tabulku_companies)
    ]

